#include <Windows.h>
#include <iostream>
#include <cstdio>
#include <string>
#define _CRT_SECURE_NO_DEPRICATE
#define _CRT_SECURE_NO_WARNINGS

#pragma warning(suppress : 4996)
#pragma warning(disable : 4996)

#define x(x) (x - 0x400000 + (DWORD)GetModuleHandleA(0))

void main(LPVOID a)
{
	DWORD test; 
	VirtualProtect((PVOID)&FreeConsole, 1, PAGE_EXECUTE_READWRITE, &test);
	*(BYTE*)(&FreeConsole) = 0xC3;
	AllocConsole(); SetConsoleTitleA("TestExploit");
	HWND ConsoleHandle = GetConsoleWindow();
	freopen("CONOUT$", "w", stdout);
	freopen("CONIN$", "r", stdin);
	::SetWindowPos(ConsoleHandle, HWND_TOP, 0, 0, 0, 0, SWP_DRAWFRAME | SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);
	::ShowWindow(ConsoleHandle, SW_NORMAL);
	printf("Test Exploit");
	printf("\nDoing Address Stuff...\n");
	typedef void(__cdecl* rprint)(int, const char*, ...);
	rprint rp = (rprint)x(0x7E4F40); // '0x7E4F40' = Current Address (Address), updated address will being on this repo.
	printf("Done!\n");
	std::string str;
	int type;
	printf("Print Type?: ");
	std::cin >> type;
	printf("Text To Print?: ");
	std::cin >> str;
	const char* c = str.c_str();
	rp(type, c);
	printf("Done!\n");
}

BOOL APIENTRY DllMain(HMODULE a1, DWORD a2, LPVOID a3)
{
	if (a2 == DLL_PROCESS_ATTACH) {
		DisableThreadLibraryCalls(a1);
		CreateThread(0, 0, (LPTHREAD_START_ROUTINE)main, a1, 0, 0);
	}
	return TRUE;
}
